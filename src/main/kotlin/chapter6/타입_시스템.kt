package chapter6


/**
 * 타입 시스템의 종류와 특징
 * - 훌륭한 타입 시스템은 런타임에 발생할 수 있는 오류를 컴파일 타임에 발생시킨다.
 * - IDE 를 비롯한 다양한 도구에게 프로그램에 대한 정보를 제공한다.
 *
 * 같은 타입 시스템이라고 해도, 타입 규칙을 얼마나 엄격하게 지켜야 하는지에 대한 정도의 차이는 존재한다.
 *
 * 관대한 타입(weak type) 시스템
 * 프로그래밍의 자유도를 높여주지만, 런타임 환경에서 예상하지 못한 오류를 만날 가능성이 있다.
 *
 * 견고한 타입(strong type) 시스템
 * 많은 오류를 컴파일 타임에 잡아주지만, 언어가 복잡해지고 컴파일이 어려워 진입 장벽이 높을 수 있다.
 *
 * 함수형 언어에서는 객체 뿌남ㄴ이 아니라, 표현식(expression)과 함수도 타입을 가진다.
 *
 */

/**
 * 코드 6-1. 코틀린으로 작성한 product 함수
 */
fun product(x: Int, y: Int): Int {
    doDangerouseIO()
    return x * y
}

fun doDangerouseIO() {}

/**
 * 코드 6-2. 하스켈로 작성한 product 함수
 *
 * product Num n => n -> n -> IO n
 * product x y = do
 *  doDangerouseIO
 *  return ( x * y )
 */

/**
 * 하스켈에서는 반환값에 IO가 명시되어 있어, 함수 내부에 IO 작업이 이싿는 것을 타입 선언에 명시한다.
 * 반면, 코틀린의 함수 타입은 함수 내부에 IO 작업(부수 효과)가 있다는 것을 알려주지 않는다.
 */



